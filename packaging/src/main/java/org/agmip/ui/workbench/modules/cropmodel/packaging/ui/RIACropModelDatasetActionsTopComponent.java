/*
 * Copyright (c) 2012-2016, AgMIP All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * 
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * 
 * * Neither the name of the AgMIP nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.agmip.ui.workbench.modules.cropmodel.packaging.ui;

import org.agmip.ui.workbench.modules.cropmodel.project.RIACropModelDataset;
import org.agmip.ui.workbench.modules.cropmodel.project.lookup.RIACropModelDatasetSelectionLookup;
import org.netbeans.api.project.ProjectUtils;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.agmip.ui.workbench.modules.cropmodel.packaging.ui//RIACropModelDatasetActions//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "RIACropModelDatasetActionsTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "navigator", openAtStartup = true)
@ActionID(category = "Window", id = "org.agmip.ui.workbench.modules.cropmodel.packaging.ui.RIACropModelDatasetActionsTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_RIACropModelDatasetActionsAction",
        preferredID = "RIACropModelDatasetActionsTopComponent"
)
@Messages({
    "CTL_RIACropModelDatasetActionsAction=RIACropModelDatasetActions",
    "CTL_RIACropModelDatasetActionsTopComponent=RIACropModelDatasetActions Window",
    "HINT_RIACropModelDatasetActionsTopComponent=This is a RIACropModelDatasetActions window"
})
public final class RIACropModelDatasetActionsTopComponent extends TopComponent implements LookupListener {

    private final Lookup.Result<RIACropModelDataset> selectedDatasets;

    public RIACropModelDatasetActionsTopComponent() {
        initComponents();
        setName(Bundle.CTL_RIACropModelDatasetActionsTopComponent());
        setToolTipText(Bundle.HINT_RIACropModelDatasetActionsTopComponent());
        Lookup lookup = new RIACropModelDatasetSelectionLookup();
        this.selectedDatasets = lookup.lookupResult(RIACropModelDataset.class);
        this.selectedDatasets.addLookupListener(this);
        //It seems weird but go ahead and activate the Projects panel at this point
        WindowManager.getDefault().invokeWhenUIReady(new Runnable() {
            @Override
            public void run() {
                // Hack to force the current Project selection when the application starts up
                TopComponent tc = WindowManager.getDefault().findTopComponent("projectTabLogical_tc");
                if (tc != null) {
                    tc.requestActive();
                }
            }
        });
        resultChanged(new LookupEvent(selectedDatasets));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(RIACropModelDatasetActionsTopComponent.class, "RIACropModelDatasetActionsTopComponent.jLabel1.text")); // NOI18N
        jPanel1.add(jLabel1, java.awt.BorderLayout.CENTER);

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        StringBuilder sb = new StringBuilder("<html>Project Details: ");

        if (!selectedDatasets.allInstances().isEmpty()) {
            selectedDatasets.allInstances().stream().forEach((next) -> {
                sb.append(ProjectUtils.getInformation(next).getDisplayName());
                sb.append(next.getDataset().datasetStatisticsHTML());
            });
        } else {
            sb.append("None");
        }
        sb.append("</html>");
        jLabel1.setText(sb.toString());
    }
}
